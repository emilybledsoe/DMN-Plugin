function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import Manager from './Manager';
import Ids from 'ids';
import { isAny } from '../util/ModelUtil';

var EditingManager =
/*#__PURE__*/
function (_Manager) {
  _inherits(EditingManager, _Manager);

  function EditingManager() {
    _classCallCheck(this, EditingManager);

    return _possibleConstructorReturn(this, _getPrototypeOf(EditingManager).apply(this, arguments));
  }

  _createClass(EditingManager, [{
    key: "_init",
    value: function _init(options) {
      var _this = this;

      _get(_getPrototypeOf(EditingManager.prototype), "_init", this).call(this, options); // hook ID collection into the modeler


      this.on('import.parse.complete', function (event) {
        if (!event.error) {
          _this._collectIds(event.definitions, event.context);
        }
      });
      this.on('destroy', function () {
        _this._moddle.ids.clear();
      });
      this.on('viewer.created', function (_ref) {
        var viewer = _ref.viewer;
        viewer.on('elements.changed', function (_ref2) {
          var elements = _ref2.elements;
          var viewsChanged = elements.some(function (e) {
            return isAny(e, ['dmn:Decision', 'dmn:Definitions']);
          });

          if (viewsChanged) {
            _this._updateViews();
          }
        });
      });
    }
    /**
     * Collect ids processed during parsing of the
     * definitions object.
     *
     * @param {ModdleElement} definitions
     * @param {Context} context
     */

  }, {
    key: "_collectIds",
    value: function _collectIds(definitions, context) {
      var moddle = definitions.$model,
          ids = moddle.ids,
          id; // remove references from previous import

      ids.clear();

      for (id in context.elementsById) {
        ids.claim(id, context.elementsById[id]);
      }
    }
  }, {
    key: "_createModdle",
    value: function _createModdle(options) {
      var moddle = _get(_getPrototypeOf(EditingManager.prototype), "_createModdle", this).call(this, options); // attach ids to moddle to be able to track
      // and validated ids in the DMN XML document
      // tree


      moddle.ids = new Ids([32, 36, 1]);
      return moddle;
    }
  }]);

  return EditingManager;
}(Manager);

export { EditingManager as default };
//# sourceMappingURL=EditingManager.js.map