{"version":3,"sources":["../../src/components/EditableComponent.js"],"names":["Component","ContentEditable","EditableComponent","props","context","event","setState","focussed","onFocus","invalid","state","changing","onBlur","injector","debounceInput","get","inputChanged","value","onChange","currentValue","onInput","validate","className","placeholder","ctrlForNewline","getDisplayValue"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\n\nimport ContentEditable from './ContentEditable';\n\n\n/**\n * A base component for interactivity.\n *\n * @example\n *\n * class Foo extends EditableComponent {\n *\n *   render() {\n *     return (\n *       <div>{ this.getEditor() }</div>\n *     );\n *   }\n * }\n *\n * And in use:\n *\n * <Foo value={ blub }\n *      onChange={ (newValue) => { ... }\n *      onFocus={ () => { ... } }\n *      onBlur={ () => { ... } }\n *      validate={ (newValue) => { return 'some-error'; } }\n *      className=\"...\" } />\n *\n * Special classes added:\n *\n * * focused\n * * invalid\n *\n */\nexport default class EditableComponent extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      changing: false,\n      focussed: false\n    };\n\n\n    const { injector } = context;\n\n    const debounceInput = injector.get('debounceInput');\n\n    this.inputChanged = debounceInput((value) => {\n      const { onChange } = this.props;\n\n      if (typeof onChange === 'function') {\n        onChange(value);\n      }\n\n      // only unset changed if user input and\n      // committed changed value equal. This prevents the\n      // input jumping back to the saved, good value.\n      const currentValue = this.state.changing;\n\n      this.setState({\n        changing: currentValue === value ? false : currentValue\n      });\n    });\n\n    this.onInput = (value) => {\n\n      var validate = this.props.validate || function() {};\n\n      var invalid = validate(value);\n\n      this.setState({\n        changing: value,\n        invalid: invalid\n      });\n\n      if (!invalid) {\n        this.inputChanged(value);\n      }\n    };\n  }\n\n  onFocus = event => {\n    this.setState({\n      focussed: true\n    });\n\n    var { onFocus } = this.props;\n\n    if (typeof onFocus === 'function') {\n      onFocus(event);\n    }\n  }\n\n  onBlur = event => {\n    this.setState({\n      focussed: false\n    });\n\n    const { invalid } = this.state;\n\n    if (invalid) {\n      this.setState({\n        changing: false,\n        invalid: false\n      });\n    }\n\n    const { onBlur } = this.props;\n\n    if (typeof onBlur === 'function') {\n      onBlur(event);\n    }\n  }\n\n  getClassName() {\n    var {\n      className,\n      value\n    } = this.props;\n\n    var {\n      changing,\n      focussed,\n      invalid\n    } = this.state;\n\n    className += ' editable';\n\n    if (focussed) {\n      className += ' focussed';\n    }\n\n    if (invalid) {\n      className += ' invalid';\n    }\n\n    if (!value && !changing) {\n      className += ' empty';\n    }\n\n    return className;\n  }\n\n  getDisplayValue() {\n\n    var {\n      value,\n      placeholder\n    } = this.props;\n\n    var {\n      focussed,\n      changing\n    } = this.state;\n\n    if (typeof changing === 'string') {\n      value = changing;\n    }\n\n    if (!value) {\n      value = focussed ? '' : (placeholder || '');\n    }\n\n    return value;\n  }\n\n  getEditor(props = {}) {\n\n    return (\n      <ContentEditable\n        className={ props.className }\n        ctrlForNewline={ props.ctrlForNewline }\n        onFocus={ this.onFocus }\n        onBlur={ this.onBlur }\n        onInput={ this.onInput }\n        value={ this.getDisplayValue() } />\n    );\n  }\n\n}\n"],"file":"EditableComponent.js"}