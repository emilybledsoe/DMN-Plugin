import { createVNode } from "inferno";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Component } from 'inferno';

var Input =
/*#__PURE__*/
function (_Component) {
  _inherits(Input, _Component);

  function Input(props, context) {
    var _this;

    _classCallCheck(this, Input);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props, context));

    _defineProperty(_assertThisInitialized(_this), "onInput", function (event) {
      var onInput = _this.props.onInput;

      if (typeof onInput !== 'function') {
        return;
      }

      onInput(event.target.value);
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (event) {
      var onKeyDown = _this.props.onKeyDown;

      if (typeof onKeyDown !== 'function') {
        return;
      }

      onKeyDown(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyUp", function (event) {
      var onKeyUp = _this.props.onKeyUp;

      if (typeof onKeyUp !== 'function') {
        return;
      }

      onKeyUp(event);
    });

    return _this;
  }

  _createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          placeholder = _this$props.placeholder,
          type = _this$props.type,
          value = _this$props.value;
      return createVNode(64, "input", [className || '', 'dms-input'].join(' '), null, 1, {
        "placeholder": placeholder || '',
        "onInput": this.onInput,
        "onKeyDown": this.onKeyDown,
        "onKeyUp": this.onKeyUp,
        "spellcheck": "false",
        "type": type || 'text',
        "value": value
      });
    }
  }]);

  return Input;
}(Component);

export { Input as default };
//# sourceMappingURL=Input.js.map