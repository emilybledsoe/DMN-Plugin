{"version":3,"sources":["../../src/components/List.js"],"names":["Component","groupBy","RADIO","REMOVE_BTN_CLS","List","props","context","item","e","stopPropagation","removeItem","toggleItem","onChange","newItems","state","items","filter","i","setState","type","map","isChecked","className","labelComponent","classes","push","groupedItems","asPairs","toPairs","join","pair","groupTitle","groupItems","getToggleClickHandler","value","isRemovable","getRemoveClickHandler","object","entrys","key"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\n\nimport { groupBy } from 'min-dash';\n\nconst RADIO = 'radio';\n\nconst REMOVE_BTN_CLS =\n  'remove dmn-icon-clear';\n\n/**\n * Shows a list of grouped items that can be checked\n * (checkboxes or radio buttons), removed.\n *\n * Example list of items:\n *\n * [\n *   { value: 'foo', isChecked: true, isRemovable: false, group: 'foo' },\n *   { value: 'bar', isChecked: false, isRemovable: true, group: 'bar' },\n *   { value: 'baz', isCheckable: false, group: 'baz' }\n * ]\n */\nexport default class List extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    const { items } = props;\n\n    this.state = {\n      items\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    const { items } = props;\n\n    this.setState({\n      items\n    });\n  }\n\n  getRemoveClickHandler = (item) => {\n    return (e) => {\n      e.stopPropagation();\n\n      this.removeItem(item);\n    };\n  }\n\n  getToggleClickHandler = (item) => {\n    return (e) => {\n      e.stopPropagation();\n\n      this.toggleItem(item);\n    };\n  }\n\n  removeItem = (item) => {\n    const { onChange } = this.props;\n\n    // remove item\n    const newItems = this.state.items.filter(i => i !== item);\n\n    this.setState({\n      items: newItems\n    });\n\n    onChange && onChange(newItems);\n  }\n\n  toggleItem = (item) => {\n    const { onChange, type } = this.props;\n\n    // toggle item\n    const newItems = this.state.items.map(i => {\n      if (i === item) {\n        i.isChecked = !i.isChecked;\n      } else {\n\n        if (type === RADIO) {\n          i.isChecked = false;\n        }\n\n      }\n\n      return i;\n    });\n\n    this.setState({\n      items: newItems\n    });\n\n    onChange && onChange(newItems);\n  }\n\n  render() {\n    const { className, items, type, labelComponent } = this.props;\n\n    const classes = [\n      'dms-list-component'\n    ];\n\n    if (className) {\n      classes.push(className);\n    }\n\n    // group items by group title\n    const groupedItems = groupBy(items, 'group');\n\n    const asPairs = toPairs(groupedItems);\n\n    return (\n      <div className={ classes.join(' ') }>\n        {\n          asPairs.map(pair => {\n\n            const groupTitle = pair[0],\n                  groupItems = pair[1];\n\n            return (\n              <div className=\"group\">\n\n                { labelComponent && labelComponent(groupTitle) ||\n                  <h4 className=\"dms-heading\">{ groupTitle }</h4> }\n\n                <ul className=\"items no-wrap\">\n                  {\n                    groupItems.map(item => {\n\n                      return (\n                        <li className=\"item\">\n                          {\n                            type\n                              && <input\n                                type={ type }\n                                checked={ item.isChecked }\n                                className=\"item-toggle\"\n                                onClick={ this.getToggleClickHandler(item) } />\n                          }\n                          &nbsp;\n                          { item.value }\n                          {\n                            item.isRemovable\n                              && (<span\n                                title=\"Remove item\"\n                                onClick={ this.getRemoveClickHandler(item) }\n                                className={ REMOVE_BTN_CLS }>\n                              </span>)\n                          }\n                        </li>\n                      );\n\n                    })\n                  }\n                </ul>\n\n              </div>\n            );\n\n          })\n        }\n\n      </div>\n    );\n  }\n}\n\n\n// helpers ////////////\n\nfunction toPairs(object) {\n  const entrys = [];\n\n  for (let key in object) {\n    entrys.push([key, object[key]]);\n  }\n\n  return entrys;\n}"],"file":"List.js"}