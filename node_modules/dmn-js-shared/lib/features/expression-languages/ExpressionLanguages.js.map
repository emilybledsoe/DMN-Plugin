{"version":3,"sources":["../../../src/features/expression-languages/ExpressionLanguages.js"],"names":["assign","find","EXPRESSION_LANGUAGE_OPTIONS","label","value","ExpressionLanguages","injector","_injector","config","get","_config","options","defaults","editor","legacyDefaults","_getLegacyDefaults","componentName","defaultFromConfig","_getLanguageByValue","getAll","expressionLanguageValue","langauge","inputCellValue","outputCellValue","inputCell","outputCell","language","$inject"],"mappings":";;;;;;AAAA,SACEA,MADF,EAEEC,IAFF,QAGO,UAHP;AAMA,IAAMC,2BAA2B,GAAG,CAAC;AACnCC,EAAAA,KAAK,EAAE,MAD4B;AAEnCC,EAAAA,KAAK,EAAE;AAF4B,CAAD,EAGjC;AACDD,EAAAA,KAAK,EAAE,MADN;AAEDC,EAAAA,KAAK,EAAE;AAFN,CAHiC,EAMjC;AACDD,EAAAA,KAAK,EAAE,YADN;AAEDC,EAAAA,KAAK,EAAE;AAFN,CANiC,EASjC;AACDD,EAAAA,KAAK,EAAE,QADN;AAEDC,EAAAA,KAAK,EAAE;AAFN,CATiC,EAYjC;AACDD,EAAAA,KAAK,EAAE,QADN;AAEDC,EAAAA,KAAK,EAAE;AAFN,CAZiC,EAejC;AACDD,EAAAA,KAAK,EAAE,OADN;AAEDC,EAAAA,KAAK,EAAE;AAFN,CAfiC,CAApC;AAoBA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;IAqBqBC,mB;;;AACnB,+BAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKC,SAAL,GAAiBD,QAAjB;AAEA,QAAME,MAAM,GAAGF,QAAQ,CAACG,GAAT,CAAa,4BAAb,KAA8C,EAA7D;AAEA,SAAKC,OAAL,GAAe;AACbC,MAAAA,OAAO,EAAET,2BADI;AAEbU,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE;AADA;AAFG,KAAf,CALoB,CAYpB;;AACA,QAAIL,MAAM,CAACG,OAAX,EAAoB;AAClB,WAAKD,OAAL,CAAaC,OAAb,GAAuBH,MAAM,CAACG,OAA9B;AACD;;AAED,QAAMG,cAAc,GAAG,KAAKC,kBAAL,EAAvB;;AAEAf,IAAAA,MAAM,CAAC,KAAKU,OAAL,CAAaE,QAAd,EAAwBE,cAAxB,EAAwCN,MAAM,CAACI,QAA/C,CAAN;AACD;AAED;;;;;;;;;;;+BAOWI,a,EAAe;AAAA,UAChBJ,QADgB,GACH,KAAKF,OADF,CAChBE,QADgB;AAExB,UAAMK,iBAAiB,GAAGL,QAAQ,CAACI,aAAD,CAAR,IAA2BJ,QAAQ,CAACC,MAA9D;AAEA,aAAO,KAAKK,mBAAL,CAAyBD,iBAAzB,KAA+C,KAAKE,MAAL,GAAc,CAAd,CAAtD;AACD;AAED;;;;;;;;;6BAMSC,uB,EAAyB;AAChC,UAAMC,QAAQ,GAAG,KAAKH,mBAAL,CAAyBE,uBAAzB,CAAjB;;AAEA,aAAOC,QAAQ,GAAGA,QAAQ,CAAClB,KAAZ,GAAoBiB,uBAAnC;AACD;AAED;;;;;;;;6BAKS;AACP,aAAO,KAAKV,OAAL,CAAaC,OAApB;AACD;;;yCAEoB;AACnB,UAAMC,QAAQ,GAAG,EAAjB;AAAA,UACMN,QAAQ,GAAG,KAAKC,SADtB;AAGA,UAAMe,cAAc,GAAGhB,QAAQ,CAACG,GAAT,CAAa,uCAAb,CAAvB;AACA,UAAMc,eAAe,GAAGjB,QAAQ,CAACG,GAAT,CAAa,wCAAb,CAAxB;;AAEA,UAAIa,cAAJ,EAAoB;AAClBV,QAAAA,QAAQ,CAACY,SAAT,GAAqBF,cAArB;AACD;;AAED,UAAIC,eAAJ,EAAqB;AACnBX,QAAAA,QAAQ,CAACa,UAAT,GAAsBF,eAAtB;AACD;;AAED,aAAOX,QAAP;AACD;;;wCAEmBR,K,EAAO;AACzB,aAAOH,IAAI,CAAC,KAAKkB,MAAL,EAAD,EAAgB,UAAAO,QAAQ;AAAA,eAAItB,KAAK,KAAKsB,QAAQ,CAACtB,KAAvB;AAAA,OAAxB,CAAX;AACD;;;;;;SA9EkBC,mB;AAiFrBA,mBAAmB,CAACsB,OAApB,GAA8B,CAAE,UAAF,CAA9B","sourcesContent":["import {\n  assign,\n  find\n} from 'min-dash';\n\n\nconst EXPRESSION_LANGUAGE_OPTIONS = [{\n  label: 'FEEL',\n  value: 'feel'\n}, {\n  label: 'JUEL',\n  value: 'juel'\n}, {\n  label: 'JavaScript',\n  value: 'javascript'\n}, {\n  label: 'Groovy',\n  value: 'groovy'\n}, {\n  label: 'Python',\n  value: 'python'\n}, {\n  label: 'JRuby',\n  value: 'jruby'\n}];\n\n/**\n * @typedef ExpressionLanguageDescriptor\n * @property {string} value - value inserted into XML\n * @property {string} label - human-readable label\n */\n\n/**\n * Provide options and defaults of expression languages via config.\n *\n * @example\n *\n * // there will be two languages available with FEEL as default\n * const editor = new DmnJS({\n *   expressionLanguages: {\n *     options: [{\n *       value: 'feel',\n *       label: 'FEEL'\n *     }, {\n *       value: 'juel',\n *       label: 'JUEL'\n *     }],\n *     defaults: {\n *       editor: 'feel'\n *     }\n *   }\n * })\n */\nexport default class ExpressionLanguages {\n  constructor(injector) {\n    this._injector = injector;\n\n    const config = injector.get('config.expressionLanguages') || {};\n\n    this._config = {\n      options: EXPRESSION_LANGUAGE_OPTIONS,\n      defaults: {\n        editor: 'feel'\n      }\n    };\n\n    // first assign the list of languages as it might be required for the legacy defaults\n    if (config.options) {\n      this._config.options = config.options;\n    }\n\n    const legacyDefaults = this._getLegacyDefaults();\n\n    assign(this._config.defaults, legacyDefaults, config.defaults);\n  }\n\n  /**\n   * Get default expression language for a component or the editor if `componentName`\n   * is not provided.\n   *\n   * @param {string} [componentName]\n   * @returns {ExpressionLanguageDescriptor}\n   */\n  getDefault(componentName) {\n    const { defaults } = this._config;\n    const defaultFromConfig = defaults[componentName] || defaults.editor;\n\n    return this._getLanguageByValue(defaultFromConfig) || this.getAll()[0];\n  }\n\n  /**\n   * Get label for provided expression language.\n   *\n   * @param {string} expressionLanguageValue - value from XML\n   * @returns {string}\n   */\n  getLabel(expressionLanguageValue) {\n    const langauge = this._getLanguageByValue(expressionLanguageValue);\n\n    return langauge ? langauge.label : expressionLanguageValue;\n  }\n\n  /**\n   * Get list of configured expression languages.\n   *\n   * @returns {ExpressionLanguageDescriptor[]}\n   */\n  getAll() {\n    return this._config.options;\n  }\n\n  _getLegacyDefaults() {\n    const defaults = {},\n          injector = this._injector;\n\n    const inputCellValue = injector.get('config.defaultInputExpressionLanguage');\n    const outputCellValue = injector.get('config.defaultOutputExpressionLanguage');\n\n    if (inputCellValue) {\n      defaults.inputCell = inputCellValue;\n    }\n\n    if (outputCellValue) {\n      defaults.outputCell = outputCellValue;\n    }\n\n    return defaults;\n  }\n\n  _getLanguageByValue(value) {\n    return find(this.getAll(), language => value === language.value);\n  }\n}\n\nExpressionLanguages.$inject = [ 'injector' ];\n"],"file":"ExpressionLanguages.js"}