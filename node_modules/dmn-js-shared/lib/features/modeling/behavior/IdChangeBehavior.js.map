{"version":3,"sources":["../../../../src/features/modeling/behavior/IdChangeBehavior.js"],"names":["forEach","CommandInterceptor","is","getBusinessObject","ID","IdChangeBehavior","eventBus","executed","updateIds","bind","context","element","oldProperties","properties","bo","shouldSkipUpdate","definitions","getDefinitions","drgElements","get","drgElement","updateElementReferences","id","artifacts","artifact","updateAssociationReferences","newProperties","isIdChange","$inject","$parent","oldId","handlers","authorityRequirement","requiredAuthority","requiredDecision","requiredInput","href","informationRequirement","knowledgeRequirement","requiredKnowledge","handler","key","sourceRef","targetRef"],"mappings":"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","sourcesContent":["import { forEach } from 'min-dash';\r\n\r\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\nimport {\r\n  is,\r\n  getBusinessObject\r\n} from '../../../util/ModelUtil';\r\n\r\nconst ID = 'id';\r\n\r\n\r\nexport default class IdChangeBehavior extends CommandInterceptor {\r\n  constructor(eventBus) {\r\n    super(eventBus);\r\n\r\n    this.executed('element.updateProperties', this.updateIds.bind(this));\r\n  }\r\n\r\n  updateIds({ context }) {\r\n    const { element, oldProperties, properties } = context;\r\n\r\n    const bo = getBusinessObject(element);\r\n\r\n    if (this.shouldSkipUpdate(bo, oldProperties, properties)) {\r\n      return;\r\n    }\r\n\r\n    const definitions = getDefinitions(bo);\r\n\r\n    const drgElements = definitions.get('drgElement');\r\n    drgElements.forEach(drgElement => {\r\n      updateElementReferences(drgElement, oldProperties.id, properties.id);\r\n    });\r\n\r\n    const artifacts = definitions.get('artifact');\r\n    artifacts.forEach(artifact => {\r\n      updateAssociationReferences(artifact, oldProperties.id, properties.id);\r\n    });\r\n  }\r\n\r\n  shouldSkipUpdate(bo, oldProperties, newProperties) {\r\n    return !isIdChange(oldProperties, newProperties) ||\r\n     (!is(bo, 'dmn:DRGElement') && !is(bo, 'dmn:TextAnnotation'));\r\n  }\r\n}\r\n\r\nIdChangeBehavior.$inject = [ 'eventBus' ];\r\n\r\n\r\n// helpers //////////////////////\r\n\r\nfunction isIdChange(oldProperties, properties) {\r\n  return ID in oldProperties && ID in properties;\r\n}\r\n\r\n\r\n/**\r\n * Walk up the tree until at the root to get to dmn:Definitions.\r\n *\r\n * @param {ModdleElement} element\r\n */\r\nfunction getDefinitions(element) {\r\n  let definitions = element;\r\n\r\n  while (!is(definitions, 'dmn:Definitions')) {\r\n    definitions = definitions.$parent;\r\n  }\r\n\r\n  return definitions;\r\n}\r\n\r\nfunction updateElementReferences(element, oldId, id) {\r\n\r\n  const handlers = {\r\n\r\n    authorityRequirement: () => {\r\n      element.authorityRequirement.forEach(authorityRequirement => {\r\n        const {\r\n          requiredAuthority,\r\n          requiredDecision,\r\n          requiredInput\r\n        } = authorityRequirement;\r\n\r\n        if (requiredAuthority && requiredAuthority.href === `#${oldId}`) {\r\n          requiredAuthority.href = `#${id}`;\r\n        }\r\n\r\n        if (requiredDecision && requiredDecision.href === `#${oldId}`) {\r\n          requiredDecision.href = `#${id}`;\r\n        }\r\n\r\n        if (requiredInput && requiredInput.href === `#${oldId}`) {\r\n          requiredInput.href = `#${id}`;\r\n        }\r\n      });\r\n    },\r\n\r\n    informationRequirement: () => {\r\n      element.informationRequirement.forEach(informationRequirement => {\r\n        const { requiredDecision, requiredInput } = informationRequirement;\r\n\r\n        if (requiredDecision && requiredDecision.href === `#${oldId}`) {\r\n          requiredDecision.href = `#${id}`;\r\n        }\r\n\r\n        if (requiredInput && requiredInput.href === `#${oldId}`) {\r\n          requiredInput.href = `#${id}`;\r\n        }\r\n      });\r\n    },\r\n\r\n    knowledgeRequirement: () => {\r\n      element.knowledgeRequirement.forEach(knowledgeRequirement => {\r\n        const { requiredKnowledge } = knowledgeRequirement;\r\n\r\n        if (requiredKnowledge && requiredKnowledge.href === `#${oldId}`) {\r\n          requiredKnowledge.href = `#${id}`;\r\n        }\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  forEach(handlers, (handler, key) => {\r\n\r\n    if (element[key]) {\r\n      handler();\r\n    }\r\n\r\n  });\r\n}\r\n\r\nfunction updateAssociationReferences(element, oldId, id) {\r\n\r\n  const handlers = {\r\n    sourceRef: () => {\r\n      const { sourceRef } = element;\r\n\r\n      if (sourceRef.href === `#${oldId}`) {\r\n        sourceRef.href = `#${id}`;\r\n      }\r\n    },\r\n    targetRef: () => {\r\n      const { targetRef } = element;\r\n\r\n      if (targetRef.href === `#${oldId}`) {\r\n        targetRef.href = `#${id}`;\r\n      }\r\n    }\r\n  };\r\n\r\n  forEach(handlers, (handler, key) => {\r\n\r\n    if (element[key]) {\r\n      handler();\r\n    }\r\n\r\n  });\r\n}\r\n"],"file":"IdChangeBehavior.js"}