{"version":3,"sources":["../../src/util/ModelUtil.js"],"names":["some","is","element","type","bo","getBusinessObject","$instanceOf","isInput","isOutput","isRule","businessObject","getName","name","isAny","types","t"],"mappings":"AAAA,SAASA,IAAT,QAAqB,UAArB;AAEA;;;;;;;;;AAQA,OAAO,SAASC,EAAT,CAAYC,OAAZ,EAAqBC,IAArB,EAA2B;AAChC,MAAIC,EAAE,GAAGC,iBAAiB,CAACH,OAAD,CAA1B;AAEA,SAAOE,EAAE,IAAK,OAAOA,EAAE,CAACE,WAAV,KAA0B,UAAjC,IAAgDF,EAAE,CAACE,WAAH,CAAeH,IAAf,CAAvD;AACD;AAGD,OAAO,SAASI,OAAT,CAAiBL,OAAjB,EAA0B;AAC/B,SAAOD,EAAE,CAACC,OAAD,EAAU,iBAAV,CAAT;AACD;AAGD,OAAO,SAASM,QAAT,CAAkBN,OAAlB,EAA2B;AAChC,SAAOD,EAAE,CAACC,OAAD,EAAU,kBAAV,CAAT;AACD;AAGD,OAAO,SAASO,MAAT,CAAgBP,OAAhB,EAAyB;AAC9B,SAAOD,EAAE,CAACC,OAAD,EAAU,kBAAV,CAAT;AACD;AAGD;;;;;;;;AAOA,OAAO,SAASG,iBAAT,CAA2BH,OAA3B,EAAoC;AACzC,SAAQA,OAAO,IAAIA,OAAO,CAACQ,cAApB,IAAuCR,OAA9C;AACD;AAGD,OAAO,SAASS,OAAT,CAAiBT,OAAjB,EAA0B;AAC/B,SAAOG,iBAAiB,CAACH,OAAD,CAAjB,CAA2BU,IAAlC;AACD;AAGD;;;;;;;;;AAQA,OAAO,SAASC,KAAT,CAAeX,OAAf,EAAwBY,KAAxB,EAA+B;AACpC,SAAOd,IAAI,CAACc,KAAD,EAAQ,UAASC,CAAT,EAAY;AAC7B,WAAOd,EAAE,CAACC,OAAD,EAAUa,CAAV,CAAT;AACD,GAFU,CAAX;AAGD","sourcesContent":["import { some } from 'min-dash';\n\n/**\n * Is an element of the given DMN type?\n *\n * @param  {tjs.model.Base|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nexport function is(element, type) {\n  var bo = getBusinessObject(element);\n\n  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);\n}\n\n\nexport function isInput(element) {\n  return is(element, 'dmn:InputClause');\n}\n\n\nexport function isOutput(element) {\n  return is(element, 'dmn:OutputClause');\n}\n\n\nexport function isRule(element) {\n  return is(element, 'dmn:DecisionRule');\n}\n\n\n/**\n * Return the business object for a given element.\n *\n * @param  {tjs.model.Base|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nexport function getBusinessObject(element) {\n  return (element && element.businessObject) || element;\n}\n\n\nexport function getName(element) {\n  return getBusinessObject(element).name;\n}\n\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {djs.model.Base} element\n * @param {Array<string>} types\n *\n * @return {boolean}\n */\nexport function isAny(element, types) {\n  return some(types, function(t) {\n    return is(element, t);\n  });\n}\n"],"file":"ModelUtil.js"}