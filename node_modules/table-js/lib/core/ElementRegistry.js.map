{"version":3,"sources":["../../src/core/ElementRegistry.js"],"names":["ElementRegistry","eventBus","_eventBus","_elements","on","clear","bind","element","type","id","values","fn","forEach","filter","newId","_validateId","get","fire","remove","add","Error","$inject","obj","Object","keys","map","k"],"mappings":";;;;;;IAAqBA,e;;;AACnB,2BAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKC,SAAL,GAAiBD,QAAjB;AAEA,SAAKE,SAAL,GAAiB,EAAjB;AAEAF,IAAAA,QAAQ,CAACG,EAAT,CAAY,aAAZ,EAA2B,KAAKC,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAA3B;AACD;;;;wBAEGC,O,EAASC,I,EAAM;AAAA,UACTC,EADS,GACFF,OADE,CACTE,EADS;AAGjB,WAAKN,SAAL,CAAeM,EAAf,IAAqBF,OAArB;AACD;;;2BAEMA,O,EAAS;AACd,UAAME,EAAE,GAAGF,OAAO,CAACE,EAAR,IAAcF,OAAzB;AAEA,aAAO,KAAKJ,SAAL,CAAeM,EAAf,CAAP;AACD;;;wBAEGA,E,EAAI;AACN,aAAO,KAAKN,SAAL,CAAeM,EAAf,CAAP;AACD;;;6BAEQ;AACP,aAAOC,MAAM,CAAC,KAAKP,SAAN,CAAb;AACD;;;4BAEOQ,E,EAAI;AACVD,MAAAA,MAAM,CAAC,KAAKP,SAAN,CAAN,CAAuBS,OAAvB,CAA+B,UAAAL,OAAO;AAAA,eAAII,EAAE,CAACJ,OAAD,CAAN;AAAA,OAAtC;AACD;;;2BAEMI,E,EAAI;AACT,aAAOD,MAAM,CAAC,KAAKP,SAAN,CAAN,CAAuBU,MAAvB,CAA8B,UAAAN,OAAO;AAAA,eAAII,EAAE,CAACJ,OAAD,CAAN;AAAA,OAArC,CAAP;AACD;;;4BAEO;AACN,WAAKJ,SAAL,GAAiB,EAAjB;AACD;;;6BAEQI,O,EAASO,K,EAAO;AAEvB,WAAKC,WAAL,CAAiBD,KAAjB;;AAEA,UAAI,OAAOP,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,QAAAA,OAAO,GAAG,KAAKS,GAAL,CAAST,OAAT,CAAV;AACD;;AAED,WAAKL,SAAL,CAAee,IAAf,CAAoB,kBAApB,EAAwC;AACtCV,QAAAA,OAAO,EAAEA,OAD6B;AAEtCO,QAAAA,KAAK,EAAEA;AAF+B,OAAxC;;AAKA,WAAKI,MAAL,CAAYX,OAAZ;AAEAA,MAAAA,OAAO,CAACE,EAAR,GAAaK,KAAb;AAEA,WAAKK,GAAL,CAASZ,OAAT;AACD;AAED;;;;;;;;;;;gCAQYE,E,EAAI;AACd,UAAI,CAACA,EAAL,EAAS;AACP,cAAM,IAAIW,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,UAAI,KAAKjB,SAAL,CAAeM,EAAf,CAAJ,EAAwB;AACtB,cAAM,IAAIW,KAAJ,CAAU,qBAAqBX,EAArB,GAA0B,gBAApC,CAAN;AACD;AACF;;;;;;SA7EkBT,e;AAgFrBA,eAAe,CAACqB,OAAhB,GAA0B,CAAE,UAAF,CAA1B,C,CAGA;;AAEA,SAASX,MAAT,CAAgBY,GAAhB,EAAqB;AACnB,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,GAAjB,CAAqB,UAASC,CAAT,EAAY;AACtC,WAAOJ,GAAG,CAACI,CAAD,CAAV;AACD,GAFM,CAAP;AAGD","sourcesContent":["export default class ElementRegistry {\n  constructor(eventBus) {\n    this._eventBus = eventBus;\n\n    this._elements = {};\n\n    eventBus.on('table.clear', this.clear.bind(this));\n  }\n\n  add(element, type) {\n    const { id } = element;\n\n    this._elements[id] = element;\n  }\n\n  remove(element) {\n    const id = element.id || element;\n\n    delete this._elements[id];\n  }\n\n  get(id) {\n    return this._elements[id];\n  }\n\n  getAll() {\n    return values(this._elements);\n  }\n\n  forEach(fn) {\n    values(this._elements).forEach(element => fn(element));\n  }\n\n  filter(fn) {\n    return values(this._elements).filter(element => fn(element));\n  }\n\n  clear() {\n    this._elements = {};\n  }\n\n  updateId(element, newId) {\n\n    this._validateId(newId);\n\n    if (typeof element === 'string') {\n      element = this.get(element);\n    }\n\n    this._eventBus.fire('element.updateId', {\n      element: element,\n      newId: newId\n    });\n\n    this.remove(element);\n\n    element.id = newId;\n\n    this.add(element);\n  }\n\n  /**\n * Validate the suitability of the given id and signals a problem\n * with an exception.\n *\n * @param {String} id\n *\n * @throws {Error} if id is empty or already assigned\n */\n  _validateId(id) {\n    if (!id) {\n      throw new Error('element must have an id');\n    }\n\n    if (this._elements[id]) {\n      throw new Error('element with id ' + id + ' already added');\n    }\n  }\n}\n\nElementRegistry.$inject = [ 'eventBus' ];\n\n\n// helpers\n\nfunction values(obj) {\n  return Object.keys(obj).map(function(k) {\n    return obj[k];\n  });\n}"],"file":"ElementRegistry.js"}