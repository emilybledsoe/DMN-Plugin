function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A handler that implements cell editing.
 *
 * Per default, this handler does nothing.
 * Interested parties may hook into the edit commands
 * `preExecute` or `postExecute` phases to carry out
 * the actual editing.
 */
var EditCellHandler =
/*#__PURE__*/
function () {
  function EditCellHandler() {
    _classCallCheck(this, EditCellHandler);
  }

  _createClass(EditCellHandler, [{
    key: "execute",

    /**
     * <do>
     */
    value: function execute(context) {
      var cell = context.cell;
      return cell;
    }
    /**
     * <undo>
     */

  }, {
    key: "revert",
    value: function revert(context) {
      var cell = context.cell;
      return cell;
    }
  }]);

  return EditCellHandler;
}();

export { EditCellHandler as default };
//# sourceMappingURL=EditCellHandler.js.map