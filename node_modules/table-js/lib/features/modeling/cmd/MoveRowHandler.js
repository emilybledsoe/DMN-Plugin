function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A handler that implements row movement.
 */
var MoveRowHandler =
/*#__PURE__*/
function () {
  function MoveRowHandler(modeling) {
    _classCallCheck(this, MoveRowHandler);

    this._modeling = modeling;
  }
  /**
   * <preexecute>
   */


  _createClass(MoveRowHandler, [{
    key: "preExecute",
    value: function preExecute(context) {
      var row = context.row;

      this._modeling.removeRow(row);
    }
    /**
     * <postexecute>
     */

  }, {
    key: "postExecute",
    value: function postExecute(context) {
      var row = context.row,
          index = context.index;

      this._modeling.addRow(row, index);
    }
  }]);

  return MoveRowHandler;
}();

export { MoveRowHandler as default };
MoveRowHandler.$inject = ['modeling'];
//# sourceMappingURL=MoveRowHandler.js.map