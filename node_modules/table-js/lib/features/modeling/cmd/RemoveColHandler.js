function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A handler that implements column deletion.
 */
var RemoveColHandler =
/*#__PURE__*/
function () {
  function RemoveColHandler(sheet, elementFactory) {
    _classCallCheck(this, RemoveColHandler);

    this._sheet = sheet;
    this._elementFactory = elementFactory;
  }
  /**
   * <do>
   */


  _createClass(RemoveColHandler, [{
    key: "execute",
    value: function execute(context) {
      var sheet = this._sheet;
      var col = context.col;
      var root = context.oldRoot = col.root; // retrieve and remember previous col position

      var oldIndex = context.oldIndex = root.cols.indexOf(col);

      if (oldIndex === -1) {
        throw new Error("col#".concat(col.id, " not in sheet"));
      }

      sheet.removeCol(col);
      return sheet.getRoot();
    }
    /**
     * <undo>
     */

  }, {
    key: "revert",
    value: function revert(context) {
      var col = context.col,
          oldIndex = context.oldIndex;
      var sheet = this._sheet;
      sheet.addCol(col, oldIndex);
      return sheet.getRoot();
    }
  }]);

  return RemoveColHandler;
}();

export { RemoveColHandler as default };
RemoveColHandler.$inject = ['sheet', 'elementFactory'];
//# sourceMappingURL=RemoveColHandler.js.map