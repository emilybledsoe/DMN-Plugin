{"version":3,"sources":["../../../src/features/selection/Selection.js"],"names":["isString","Selection","elementRegistry","eventBus","renderer","_elementRegistry","_eventBus","_renderer","_selection","undefined","on","element","get","oldSelection","fire","selection","$inject"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,UAAzB;AAGA;;;;IAGqBC,S;;;AAEnB,qBAAYC,eAAZ,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAiD;AAAA;;AAAA;;AAC/C,SAAKC,gBAAL,GAAwBH,eAAxB;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AAEA,SAAKI,UAAL,GAAkBC,SAAlB;AAEAN,IAAAA,QAAQ,CAACO,EAAT,CAAY,eAAZ,EAA6B,YAAM;AACjC,MAAA,KAAI,CAACF,UAAL,GAAkBC,SAAlB;AACD,KAFD;AAGD;AAED;;;;;;;;;2BAKOE,O,EAAS;AAEd,UAAIX,QAAQ,CAACW,OAAD,CAAZ,EAAuB;AACrBA,QAAAA,OAAO,GAAG,KAAKN,gBAAL,CAAsBO,GAAtB,CAA0BD,OAA1B,CAAV;AACD;;AAED,UAAME,YAAY,GAAG,KAAKL,UAA1B,CANc,CAQd;;AACA,UAAIK,YAAY,KAAKF,OAArB,EAA8B;AAC5B;AACD;;AAED,WAAKH,UAAL,GAAkBG,OAAlB;;AAEA,WAAKL,SAAL,CAAeQ,IAAf,CAAoB,mBAApB,EAAyC;AACvCD,QAAAA,YAAY,EAAZA,YADuC;AAEvCE,QAAAA,SAAS,EAAEJ;AAF4B,OAAzC;AAID;AAED;;;;;;+BAGW;AAET,UAAME,YAAY,GAAG,KAAKL,UAA1B;AAEA,WAAKA,UAAL,GAAkBC,SAAlB;;AAEA,WAAKH,SAAL,CAAeQ,IAAf,CAAoB,mBAApB,EAAyC;AACvCD,QAAAA,YAAY,EAAZA,YADuC;AAEvCE,QAAAA,SAAS,EAAE,KAAKP;AAFuB,OAAzC;AAKD;AAED;;;;;;0BAGM;AACJ,aAAO,KAAKA,UAAZ;AACD;AAED;;;;;;mCAGe;AACb,aAAO,CAAC,CAAC,KAAKA,UAAd;AACD;;;;;;SApEkBP,S;AAuErBA,SAAS,CAACe,OAAV,GAAoB,CAClB,iBADkB,EAElB,UAFkB,EAGlB,UAHkB,CAApB","sourcesContent":["import { isString } from 'min-dash';\n\n\n/**\n * Allows selecting a table cell. Selected cell will be highlighted.\n */\nexport default class Selection {\n\n  constructor(elementRegistry, eventBus, renderer) {\n    this._elementRegistry = elementRegistry;\n    this._eventBus = eventBus;\n    this._renderer = renderer;\n\n    this._selection = undefined;\n\n    eventBus.on('diagram.clear', () => {\n      this._selection = undefined;\n    });\n  }\n\n  /**\n   * Select a table cell.\n   *\n   * @param {Object|String} element - Element or element ID.\n   */\n  select(element) {\n\n    if (isString(element)) {\n      element = this._elementRegistry.get(element);\n    }\n\n    const oldSelection = this._selection;\n\n    // don't re-select already selected *Ggg*\n    if (oldSelection === element) {\n      return;\n    }\n\n    this._selection = element;\n\n    this._eventBus.fire('selection.changed', {\n      oldSelection,\n      selection: element\n    });\n  }\n\n  /**\n   * Deselect a table cell.\n   */\n  deselect() {\n\n    const oldSelection = this._selection;\n\n    this._selection = undefined;\n\n    this._eventBus.fire('selection.changed', {\n      oldSelection,\n      selection: this._selection\n    });\n\n  }\n\n  /**\n   * Get the selected cell.\n   */\n  get() {\n    return this._selection;\n  }\n\n  /**\n   * Check if a cell is selected.\n   */\n  hasSelection() {\n    return !!this._selection;\n  }\n}\n\nSelection.$inject = [\n  'elementRegistry',\n  'eventBus',\n  'renderer'\n];"],"file":"Selection.js"}