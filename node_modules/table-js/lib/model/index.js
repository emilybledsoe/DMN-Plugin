function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { assign } from 'min-dash';
export var Base = function Base(attrs) {
  _classCallCheck(this, Base);

  assign(this, attrs);
  /**
   * The object that backs up the shape
   *
   * @name Base#businessObject
   * @type Object
   */

  defineProperty(this, 'businessObject', {
    writable: true
  });
};
export var Root =
/*#__PURE__*/
function (_Base) {
  _inherits(Root, _Base);

  function Root(attrs) {
    var _this;

    _classCallCheck(this, Root);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Root).call(this, attrs));
    /**
     * The tables rows
     *
     * @name Root#rows
     * @type Row
     */

    defineProperty(_assertThisInitialized(_this), 'rows', {
      enumerable: true,
      value: _this.rows || []
    });
    /**
     * The tables columns
     *
     * @name Root#cols
     * @type Col
     */

    defineProperty(_assertThisInitialized(_this), 'cols', {
      enumerable: true,
      value: _this.cols || []
    });
    return _this;
  }

  return Root;
}(Base);
export var Row =
/*#__PURE__*/
function (_Base2) {
  _inherits(Row, _Base2);

  function Row(attrs) {
    var _this2;

    _classCallCheck(this, Row);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Row).call(this, attrs));
    /**
     * Reference to the table
     *
     * @name Row#root
     * @type Root
     */

    defineProperty(_assertThisInitialized(_this2), 'root', {
      writable: true
    });
    /**
     * Reference to contained cells
     *
     * @name Row#cells
     * @type Cell
     */

    defineProperty(_assertThisInitialized(_this2), 'cells', {
      enumerable: true,
      value: _this2.cells || []
    });
    return _this2;
  }

  return Row;
}(Base);
export var Col =
/*#__PURE__*/
function (_Base3) {
  _inherits(Col, _Base3);

  function Col(attrs) {
    var _this3;

    _classCallCheck(this, Col);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Col).call(this, attrs));
    /**
     * Reference to the table
     *
     * @name Col#table
     * @type Root
     */

    defineProperty(_assertThisInitialized(_this3), 'root', {
      writable: true
    });
    /**
     * Reference to contained cells
     *
     * @name Row#cells
     * @type Cell
     */

    defineProperty(_assertThisInitialized(_this3), 'cells', {
      enumerable: true,
      value: _this3.cells || []
    });
    return _this3;
  }

  return Col;
}(Base);
export var Cell =
/*#__PURE__*/
function (_Base4) {
  _inherits(Cell, _Base4);

  function Cell(attrs) {
    var _this4;

    _classCallCheck(this, Cell);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Cell).call(this, attrs));
    /**
     * Reference to the row
     *
     * @name Cell#row
     * @type Row
     */

    defineProperty(_assertThisInitialized(_this4), 'row', {
      writable: true
    });
    /**
     * Reference to the col
     *
     * @name Cell#col
     * @type Col
     */

    defineProperty(_assertThisInitialized(_this4), 'col', {
      writable: true
    });
    return _this4;
  }

  return Cell;
}(Base);
var TYPES = {
  root: Root,
  row: Row,
  col: Col,
  cell: Cell
};
export function create(type, attrs) {
  var Type = TYPES[type];

  if (!Type) {
    throw new Error('unknown type ' + type);
  }

  return new Type(attrs);
} // helpers /////////////

function defineProperty(el, prop, options) {
  Object.defineProperty(el, prop, options);
}
//# sourceMappingURL=index.js.map