import { createVNode, createComponentVNode } from "inferno";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import { Component } from 'inferno';

var TableComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(TableComponent, _Component);

  function TableComponent(props) {
    var _this;

    _classCallCheck(this, TableComponent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableComponent).call(this, props));
    var injector = _this._injector = props.injector;
    _this._sheet = injector.get('sheet');
    _this._changeSupport = injector.get('changeSupport');
    _this._components = injector.get('components');
    _this.onElementsChanged = _this.onElementsChanged.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(TableComponent, [{
    key: "onElementsChanged",
    value: function onElementsChanged() {
      this.forceUpdate();
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      return {
        changeSupport: this._changeSupport,
        components: this._components,
        injector: this._injector
      };
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this$_sheet$getRoot = this._sheet.getRoot(),
          id = _this$_sheet$getRoot.id;

      this._changeSupport.onElementsChanged(id, this.onElementsChanged);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$_sheet$getRoot2 = this._sheet.getRoot(),
          id = _this$_sheet$getRoot2.id;

      this._changeSupport.offElementsChanged(id, this.onElementsChanged);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$_sheet$getRoot3 = this._sheet.getRoot(),
          rows = _this$_sheet$getRoot3.rows,
          cols = _this$_sheet$getRoot3.cols;

      var beforeTableComponents = this._components.getComponents('table.before');

      var afterTableComponents = this._components.getComponents('table.after');

      var Head = this._components.getComponent('table.head');

      var Body = this._components.getComponent('table.body');

      var Foot = this._components.getComponent('table.foot');

      return createVNode(1, "div", "tjs-container", [beforeTableComponents && beforeTableComponents.map(function (Component, index) {
        return createComponentVNode(2, Component, null, index);
      }), createVNode(1, "table", "tjs-table", [Head && createComponentVNode(2, Head, {
        "rows": rows,
        "cols": cols
      }), Body && createComponentVNode(2, Body, {
        "rows": rows,
        "cols": cols
      }), Foot && createComponentVNode(2, Foot, {
        "rows": rows,
        "cols": cols
      })], 0), afterTableComponents && afterTableComponents.map(function (Component, index) {
        return createComponentVNode(2, Component, null, index);
      })], 0);
    }
  }]);

  return TableComponent;
}(Component);

export { TableComponent as default };
//# sourceMappingURL=TableComponent.js.map